# By Justin Walgran
# Copyright (c) 2012 Azavea, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

class Analysis():

    def __init__(self):
        self._messages = None
        self._warnings = None
        self._errors = None
        self._good = False

    @property
    def messages(self):
        """
        A list of informational topics generated by analysing some content
        """
        return self._messages

    @property
    def warnings(self):
        """
        A list of warning topics generated by analysing some content
        """
        return self._warnings

    @property
    def errors(self):
        """
        A list of warning topics generated by analysing some content
        """
        return self._errors

    @property
    def good(self):
        """
        A boolean that indicates whether or not the analyzed content is 'good'
        """
        return self._good

    def __str__(self):
        return self.__unicode__()

    def __unicode__(self):
        output = None
        if self.errors:
            output = '\n'.join(self.errors)

        if self.warnings:
            if output:
                output += '\n'.join(self.warnings)
            else:
                output = '\n'.join(self.warnings)

        if self.messages:
            if output:
                output += '\n'.join(self.messages)
            else:
                output = '\n'.join(self.messages)

        return output
